DROP TABLE GUEST;
DROP TABLE BIG;
DROP TABLE LITTLE ;
DROP TABLE PRODUCT;
DROP TABLE PRODUCTFILE;
DROP TABLE SELL;
DROP TABLE SELLBOX;
DROP TABLE SELLDETAIL;
DROP TABLE NOTICE;
DROP TABLE NOTICEFILE;
DROP TABLE NOTICE_USERMANAGER;
DROP TABLE ASK ;
DROP TABLE ASKFILE;
DROP TABLE ASK_USERMANAGER;
DROP TABLE ANSWER;

--고객마스터
DROP TABLE GUEST ;
CREATE TABLE GUEST(
USERID VARCHAR2(50), --아이디
PASSWD VARCHAR2(100) NOT NULL, --비밀번호
USERNAME VARCHAR2(20) NOT NULL, --이름
BIRTH VARCHAR2(10) NOT NULL, --생년월일
EMAIL VARCHAR2(30) NOT NULL, --이메일 
PHONE VARCHAR2(30) NOT NULL, --전화번호
ZIP VARCHAR2(6) NOT NULL, --우편번호
ADDR1 VARCHAR2(100) NOT NULL, --도로명주소
ADDR2 VARCHAR2(100) NOT NULL, --상세주소
REGDATE DATE DEFAULT SYSDATE, --가입일자
MODIFYDATE DATE DEFAULT SYSDATE, --수정일자
PRIMARY KEY (USERID)
);
commit;
--고객 추가
INSERT INTO GUEST(USERID,PASSWD,USERNAME,BIRTH,EMAIL,PHONE,ZIP,ADDR1,ADDR2)
VALUES('root','1111','김태준','951101','gam9320@naver.com','01012345678','00000','경기도안양시','세션102호');
SELECT * FROM GUEST;
--고객 조회
SELECT * FROM GUEST;
--고객 삭제
delete from guest
where userid = 'gg3028';
--등급&게스트
select g.*,gr.*
FROM guest g inner join grade gr on (g.gcode = gr.gcode)
where g.userid = 'C';

--대분류마스터
DROP TABLE BIG;
CREATE TABLE BIG(
BCODE VARCHAR2(10) ,--대분류코드
BNAME VARCHAR2(20) NOT NULL, --대분류이름
PRIMARY KEY (BCODE)
);
--대분류 추가
INSERT INTO BIG(BCODE,BNAME)
VALUES('b001','OUTER');
INSERT INTO BIG(BCODE,BNAME)
VALUES('b002','TOP');
INSERT INTO BIG(BCODE,BNAME)
VALUES('b003','SHIRTS');
INSERT INTO BIG(BCODE,BNAME)
VALUES('b004','PANTS');
--대분류 조회
SELECT * FROM BIG;

--소분류
DROP TABLE LITTLE;
CREATE TABLE LITTLE(
LCODE VARCHAR2(10), --소분류코드
LNAME VARCHAR2(20) NOT NULL, --소분류이름
BCODE VARCHAR2(10) NOT NULL, --대분류마스터
PRIMARY KEY (LCODE),
FOREIGN KEY (BCODE) REFERENCES BIG(BCODE)
);
--소분류 추가
INSERT INTO LITTLE(LCODE,LNAME,BCODE)
VALUES('l001','후드','b003');
INSERT INTO LITTLE(LCODE,LNAME,BCODE)
VALUES('l002','니트','b003');
INSERT INTO LITTLE(LCODE,LNAME,BCODE)
VALUES('l003','슬랙스','b004');
INSERT INTO LITTLE(LCODE,LNAME,BCODE)
VALUES('l004','반바지','b004');
--소분류 조회
SELECT * FROM LITTLE;
commit;
--상품마스터
DROP TABLE PRODUCT;
CREATE TABLE PRODUCT(
PCODE VARCHAR2(10), --상품코드
PNAME VARCHAR2(30) NOT NULL, --상품이름
PMAKER VARCHAR2(30) NOT NULL, --제조사
PRICE NUMBER(10) NOT NULL, --단가
PCOLOR VARCHAR(20) NOT NULL,--색상
PSIZE CHAR(5) NOT NULL, --사이즈//SS S M L XL XXL
BCODE VARCHAR2(10) NOT NULL, --대분류코드
LCODE VARCHAR2(10) NOT NULL, --소분류코드
REGDATE DATE DEFAULT SYSDATE, --등록일자 
MODIFYDATE DATE DEFAULT SYSDATE, --수정일자
PRIMARY KEY (PCODE),
FOREIGN KEY (BCODE) REFERENCES BIG(BCODE),
FOREIGN KEY (LCODE) REFERENCES LITTLE(LCODE)
);
rollback;
--상품 추가
INSERT INTO PRODUCT(PCODE,PNAME,PMAKER,PRICE,PCOLOR,PSIZE,BCODE,LCODE)
VALUES ('001','이졘티셔츠','이졘',5000,'RED_T-SHIRTS','SS','b003','l002');
INSERT INTO PRODUCT(PCODE,PNAME,PMAKER,PRICE,PCOLOR,PSIZE,BCODE,LCODE)
VALUES ('002','미래티셔츠','쎈',7000,'BLUE_FU-SHIRTS','M','b003','l002');
--상품 조회
SELECT P.PCODE,P.PNAME,P.PMAKER, P.PSIZE, P.PCOLOR,P.PRICE,P.REGDATE,B.BNAME,L.LNAME,PF.FNAME
FROM PRODUCT P 
JOIN LITTLE L ON (P.LCODE = L.LCODE)
JOIN BIG B ON (P.BCODE = B.BCODE)
JOIN PRODUCTFILE PF ON(P.PCODE=PF.PCODE)
ORDER BY PCODE;

SELECT PF.FNAME, SB.SBCODE,SB.AMOUNT,SB.PCODE,P.PNAME,P.PMAKER,P.PSIZE,P.PCOLOR,P.PRICE,SB.SELLCNT FROM SELLBOX SB
		JOIN PRODUCT P ON(SB.PCODE=P.PCODE)
		JOIN GUEST GU ON(SB.USERID = GU.USERID
		JOIN PRODUCTFILE PF ON(P.PCODE=PF.PCODE)
		WHERE GU.USERID = #{userid}
--제품수량
SELECT count(*) FROM PRODUCT
WHERE PCODE = '001';
--상품 전체 조회
SELECT * FROM PRODUCT;

--상품 파일 시퀀스
DROP SEQUENCE PFSEQ;
create sequence PFSEQ
start with 1; --시작숫자
--상품 파일 테이블
DROP TABLE PRODUCTFILE;
CREATE TABLE PRODUCTFILE(
FCODE NUMBER(5),--파일코드
PCODE VARCHAR2(10) NOT NULL, --상품코드
FNAME VARCHAR2(100) NOT NULL, --파일이름
REGDATE DATE DEFAULT SYSDATE, --등록일자
PRIMARY KEY (FCODE),
FOREIGN KEY (PCODE) REFERENCES PRODUCT(PCODE)
);

--장바구니 시퀀스
DROP SEQUENCE SBSEQ;
create sequence SBSEQ
start with 1; --시작숫자

--장바구니 테이블
DROP TABLE SELLBOX;
CREATE TABLE SELLBOX(
SBCODE NUMBER(5),--장바구니코드
USERID VARCHAR2(100) NOT NULL, --아이디
PCODE VARCHAR2(10) NOT NULL, --상품코드
SELLCNT NUMBER(3) NOT NULL, --주문수량
AMOUNT NUMBER(10) NOT NULL,--주문금액
PRIMARY KEY (SBCODE),
FOREIGN KEY (USERID) REFERENCES GUEST(USERID),
FOREIGN KEY (PCODE) REFERENCES PRODUCT(PCODE)
);
--조회
SELECT SB.SBCODE,SB.PCODE,P.PCOLOR,P.PRICE,SB.SELLCNT,GR.DISCOUNT,SB.AMOUNT FROM SELLBOX SB
JOIN PRODUCT P ON(SB.PCODE=P.PCODE)
JOIN GUEST GU ON(SB.USERID = GU.USERID)
JOIN GRADE GR ON(GU.GCODE=GR.GCODE)
WHERE GU.USERID = 'java';
--결제폼으로
SELECT SB.*,P.PNAME,P.PMAKER,P.PSIZE,P.PCOLOR,P.PRICE FROM SELLBOX SB
JOIN PRODUCT P ON(SB.PCODE=P.PCODE)
WHERE SB.USERID = 'java'
AND SB.PCODE='002';
--총가격
SELECT NVL(SUM(AMOUNT),0) MONEY FROM SELLBOX
WHERE USERID = 'java';
--상품 존재 여부
SELECT COUNT(*) FROM SELLBOX
WHERE USERID = 'java'
AND PCODE = '001';
--상품금액
SELECT NVL(SUM(P.PRICE*SELLCNT),0) MONEY FROM SELLBOX SB
JOIN PRODUCT P ON(SB.PCODE=P.PCODE)
WHERE SB.SBCODE = '42';
--장바구니 상품 수 업데이트
UPDATE SELLBOX
SET SELLCNT = SELLCNT + 3
WHERE USERID = 'java'
AND PCODE = '001';
--장바구니 전체 조회
SELECT * FROM SELLBOX;

--결제 시퀀스
DROP SEQUENCE SSEQ;
create sequence SSEQ
start with 1; --시작숫자

select sseq.nextval from dual;

--결제테이블
DROP TABLE SELL;
CREATE TABLE SELL(
SCODE NUMBER(5),--주문코드
USERID VARCHAR2(100) NOT NULL, --아이디
ORDERER VARCHAR2(30) NOT NULL, --주문자
RECEIVER VARCHAR2(30) NOT NULL, --받는사람
PHONE VARCHAR2(30) NOT NULL,--전화번호
EMAIL VARCHAR2(30) NOT NULL,--이메일
ZIP VARCHAR2(6) NOT NULL,--우편번호
ADDR1 VARCHAR2(100) NOT NULL,--도로명주소
ADDR2 VARCHAR2(100) NOT NULL, --상세주소
REGDATE DATE DEFAULT SYSDATE, --판매날짜
PRIMARY KEY (SCODE)
);
--결제 추가
INSERT INTO SELL(SCODE,USERID,ORDERER,RECEIVER,PHONE,EMAIL,ZIP,ADDR1,ADDR2,REGDATE)
VALUES(SSEQ.NEXTVAL,'java','감성','감성','01012345678','t9320@naver.com','000000','경기도안양시','201호',SYSDATE);
INSERT INTO SELL(SCODE,USERID,ORDERER,RECEIVER,PHONE,EMAIL,ZIP,ADDR1,ADDR2)
VALUES(SSEQ.NEXTVAL,'java','감성','감성','01012345678','t9320@naver.com','000000','경기도안양시','201호');
--결제 일부 추가
INSERT INTO SELL(SCODE,USERID,ORDERER)
VALUES(SSEQ.NEXTVAL,'java','감성');
--결제 전체 조회
SELECT * FROM SELL;
--수정
UPDATE SELL
SET RECEIVER = '감성',
PHONE = '01012345678',
EMAIL='t9320@Naver.com',
ZIP='000000',
ADDR1='경기도',
ADDR2='국제',
REGDATE = SYSDATE
WHERE SCODE = 2;

--결제상세 테이블
--주문코드 하나 마다 상품 여러개
DROP TABLE SELLDETAIL;
CREATE TABLE SELLDETAIL(
SCODE NUMBER(5), --주문코드
PCODE VARCHAR2(10), --상품코드
SELLCNT NUMBER(3) NOT NULL, --주문수량
AMOUNT NUMBER(10) NOT NULL, --상품의 총 주문가격
PRIMARY KEY(SCODE,PCODE),
FOREIGN KEY(SCODE) REFERENCES SELL(SCODE),
FOREIGN KEY(PCODE) REFERENCES PRODUCT(PCODE)
);
--상품코드로 상품의 사진과 사진명,가격을 가져온다.
--주문수량을 찍어준다.
--총가격은 가격들은 SUM해서 찍어준다.

--AMOUNT에 상품당 총가격을=장바구니에서 AMOUNT를 가지고 와 처리
INSERT INTO SELLDETAIL(SCODE,SBCODE,PCODE,SELLCNT,AMOUNT) 
VALUES(2,27,'001',5,6000);
INSERT INTO SELLDETAIL(SCODE,SBCODE,PCODE,SELLCNT,AMOUNT) 
VALUES(3,29,'001',3,8000);
--결제창에 찍어주기
SELECT S.SCODE, SD.PCODE,P.PNAME,SD.SELLCNT,SD.AMOUNT
FROM SELLDETAIL SD 
JOIN PRODUCT P ON(SD.PCODE=P.PCODE)
JOIN SELL S ON(SD.SCODE=S.SCODE)
WHERE S.USERID = 'java';
--결제 상세 일부 조회
SELECT S.SCODE,S.ORDERER,S.RECEIVER,S.PHONE,S.EMAIL,S.ZIP,S.ADDR1,S.ADDR2,S.REGDATE,SD.PCODE,SD.SELLCNT,SD.AMOUNT,P.LCODE,P.BCODE FROM SELL S
JOIN SELLDETAIL SD ON(S.SCODE=SD.SCODE)
JOIN PRODUCT P ON (SD.PCODE=P.PCODE)
WHERE S.SCODE=3;
--결제 전체 조회
SELECT * FROM SELLDETAIL;

--공지 시퀀스
DROP SEQUENCE NSEQ;
create sequence NSEQ
start with 1; --시작숫자

--공지사항
DROP TABLE NOTICE;
CREATE TABLE NOTICE(
NCODE NUMBER(5), --공지사항코드
USERID VARCHAR2(100), --아이디
SUBJECT VARCHAR2(50) NOT NULL, --제목
CONTENT VARCHAR2(1000) NOT NULL, --내용
READCNT NUMBER(5) DEFAULT 0, --조회수
IP VARCHAR2(20) NOT NULL, --아이피
REGDATE DATE DEFAULT SYSDATE, --등록일자
MODIFYDATE DATE DEFAULT SYSDATE, --수정일자
PRIMARY KEY (NCODE),
FOREIGN KEY (USERID) REFERENCES GUEST(USERID)
);

SELECT * FROM NOTICE;

-- 공지사항 유저관리 테이블
CREATE TABLE NOTICE_USERMANAGER(
GUBUN CHAR(1), --0:게시글
NUM NUMBER(5), --게시글 번호
USERID VARCHAR2(20)NOT NULL, --회원ID
STATE CHAR(1), --0:조회
PRIMARY KEY(GUBUN, NUM, USERID),
FOREIGN KEY(USERID)REFERENCES GUEST(USERID)
);
SELECT * FROM NOTICE_USERMANAGER;

--공지 파일 시퀀스
DROP SEQUENCE NFSEQ;
CREATE SEQUENCE NFSEQ
START WITH 1;
select nseq.nextval from dual;
--공지사항 파일
DROP TABLE NOTICEFILE;
CREATE TABLE NOTICEFILE(
FCODE NUMBER(5), --파일코드
NCODE NUMBER(5) NOT NULL, --공지사항코드
FNAME VARCHAR2(50) NOT NULL, --파일이름
REGDATE DATE DEFAULT SYSDATE, --등록일자
PRIMARY KEY (FCODE),
FOREIGN KEY(NCODE) REFERENCES NOTICE(NCODE)
);

SELECT * FROM NOTICEFILE;

--공지 추가
insert into notice(ncode,userid,subject,content,ip) 
		values(4,'root','root','root','192.168.0.1');


--문의 시퀀스
DROP SEQUENCE ASEQ;
create sequence ASEQ
start with 1; --시작숫자
DROP TABLE ASK;

--문의사항 테이블
DROP TABLE ASK;
CREATE TABLE ASK(
ACODE NUMBER(5), --문의사항코드
USERID VARCHAR2(100)NOT NULL, --아이디
PASSWD CHAR(4)NOT NULL, --입력 비밀번호
SUBJECT VARCHAR2(100)NOT NULL, --제목
CONTENT VARCHAR2(1000)NOT NULL, --내용
GUBUN VARCHAR2(20)DEFAULT '배송',--구분 0:배송 1:주문 2:상품 3:결제 4:기타
READCNT NUMBER(5)DEFAULT 0, --조회수
IP VARCHAR2(20)NOT NULL, --IP
REGDATE DATE DEFAULT SYSDATE,
MODIFYDATE DATE DEFAULT SYSDATE,
PRIMARY KEY (ACODE),
FOREIGN KEY (USERID) REFERENCES GUEST(USERID)
);

--문의사항 유저관리 테이블
DROP TABLE ASK_USERMANAGER;
CREATE TABLE ASK_USERMANAGER(
GUBUN CHAR(1), --0:게시글
NUM NUMBER(5), --게시글 번호
USERID VARCHAR2(20)NOT NULL, --회원ID
STATE CHAR(1), --0:조회
PRIMARY KEY(GUBUN, NUM, USERID),
FOREIGN KEY(USERID)REFERENCES GUEST(USERID)
);

DROP SEQUENCE ASKFILE;

--문의 파일 시퀀스
DROP SEQUENCE AFSEQ;
create sequence AFSEQ
start with 1; --시작숫자
select * from AFSEQ;

--문의사항 파일 테이블
DROP TABLE ASKFILE;
CREATE TABLE ASKFILE(
FCODE NUMBER(5),
ACODE NUMBER(5)NOT NULL,
FNAME VARCHAR2(50)NOT NULL,
REGDATE DATE DEFAULT SYSDATE,
PRIMARY KEY (FCODE),
FOREIGN KEY(ACODE) REFERENCES ASK(ACODE)
);




--문의사항 답변 테이블
DROP TABLE ANSWER;
CREATE TABLE ANSWER(
ASNUM NUMBER(5), --답변순서
ACODE NUMBER(5)NOT NULL, --문의사항코드
USERID VARCHAR2(100)NOT NULL, --아이디
CONTENT VARCHAR2(1000)NOT NULL,
RESTEP NUMBER(3)NOT NULL,
RELEVEL NUMBER(3)NOT NULL,
IP VARCHAR2(20)NOT NULL, --IP
REGDATE DATE DEFAULT SYSDATE,
MODIFYDATE DATE DEFAULT SYSDATE,
PRIMARY KEY (ASNUM),
FOREIGN KEY (ACODE) REFERENCES ASK(ACODE),
FOREIGN KEY (USERID) REFERENCES GUEST(USERID)
);

SELECT * FROM GRADE;
SELECT * FROM GUEST ;
SELECT * FROM BIG;
SELECT * FROM LITTLE;
SELECT * FROM PRODUCT;
SELECT * FROM SELL;
SELECT * FROM SELLDETAIL;
SELECT * FROM REVIEW;
SELECT * FROM NOTICE;
SELECT * FROM ASK;
SELECT * FROM PRODUCTFILE;
SELECT * FROM NOTICEFILE;
select * from askfile;

--공지글 조회수+1
CREATE OR REPLACE PROCEDURE READCNT (
    PGUBUN IN NOTICE_USERMANAGER.GUBUN%TYPE,
    PNUM IN NOTICE_USERMANAGER.NUM%TYPE,
    PUSERID IN NOTICE_USERMANAGER.USERID%TYPE,
    PSTATE IN NOTICE_USERMANAGER.STATE%TYPE
)
IS
    CNT NUMBER;
BEGIN
    --유저정보 조회 SELECT
    SELECT COUNT(*) INTO CNT FROM NOTICE_USERMANAGER
    WHERE GUBUN = PGUBUN
    AND NUM = PNUM
    AND USERID = PUSERID;
    
    --만약 유저정보 카운트가 0이라면
    IF CNT = 0 THEN
        --공지글 조회수+1
        UPDATE NOTICE
        SET READCNT = READCNT +1
        WHERE NCODE = PNUM;
        
        --유저관리 테이블에 INSERT
        INSERT INTO NOTICE_USERMANAGER(GUBUN,NUM,USERID,STATE) 
        VALUES(PGUBUN,PNUM,PUSERID,PSTATE);
    END IF;
END;

select * from READCNT_ASK;
CREATE OR REPLACE PROCEDURE READCNT_ASK (
    PGUBUN IN ASK_USERMANAGER.GUBUN%TYPE,
    PNUM IN ASK_USERMANAGER.NUM%TYPE,
    PUSERID IN ASK_USERMANAGER.USERID%TYPE,
    PSTATE IN ASK_USERMANAGER.STATE%TYPE
)
IS
    CNT NUMBER;
BEGIN
    --유저정보 조회 SELECT
    SELECT COUNT(*) INTO CNT FROM ASK_USERMANAGER
    WHERE GUBUN = PGUBUN
    AND NUM = PNUM
    AND USERID = PUSERID;
    
    --만약 유저정보 카운트가 0이라면
    IF CNT = 0 THEN
        --공지글 조회수+1
        UPDATE ASK
        SET READCNT = READCNT +1
        WHERE ACODE = PNUM;
        
        --유저관리 테이블에 INSERT
        INSERT INTO ASK_USERMANAGER(GUBUN,NUM,USERID,STATE) 
        VALUES(PGUBUN,PNUM,PUSERID,PSTATE);
    END IF;
END;